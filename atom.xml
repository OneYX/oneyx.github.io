<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[OneYX]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oneyx.github.io/"/>
  <updated>2016-01-06T13:07:11.959Z</updated>
  <id>http://oneyx.github.io/</id>
  
  <author>
    <name><![CDATA[OneYX]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[七天学会NodeJS]]></title>
    <link href="http://oneyx.github.io/2016/01/06/%E4%B8%83%E5%A4%A9%E5%AD%A6%E4%BC%9ANodeJS/"/>
    <id>http://oneyx.github.io/2016/01/06/七天学会NodeJS/</id>
    <published>2016-01-06T12:47:48.000Z</published>
    <updated>2016-01-06T13:07:11.959Z</updated>
    <content type="html"><![CDATA[<p><a href="/7-days-nodejs/" title="七天学会NodeJS">七天学会NodeJS</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="/7-days-nodejs/" title="七天学会NodeJS">七天学会NodeJS</a></p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSP中的EL表达式详细介绍]]></title>
    <link href="http://oneyx.github.io/2015/12/26/JSP%E4%B8%AD%E7%9A%84EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
    <id>http://oneyx.github.io/2015/12/26/JSP中的EL表达式详细介绍/</id>
    <published>2015-12-25T18:57:37.000Z</published>
    <updated>2015-12-26T05:41:02.357Z</updated>
    <content type="html"><![CDATA[<h2 id="JSP_u4E2D_u7684EL_u8868_u8FBE_u5F0F_u8BE6_u7EC6_u4ECB_u7ECD"><a href="#JSP_u4E2D_u7684EL_u8868_u8FBE_u5F0F_u8BE6_u7EC6_u4ECB_u7ECD" class="headerlink" title="JSP中的EL表达式详细介绍"></a>JSP中的EL表达式详细介绍</h2><h3 id="u4E00_u3001JSP_EL_u8BED_u8A00_u5B9A_u4E49"><a href="#u4E00_u3001JSP_EL_u8BED_u8A00_u5B9A_u4E49" class="headerlink" title="一、JSP EL语言定义"></a>一、JSP EL语言定义</h3><blockquote>
<p>&emsp;&emsp;EL 提供了在 JSP 脚本编制元素范围外使用运行时表达式的功能。脚本编制元素是指页面中能够用于在 JSP 文件中嵌入 Java 代码的元素。它们通常用于对象操作以及执行那些影响所生成内容的计算。JSP 2.0 将 EL 表达式添加为一种脚本编制元素。</p>
</blockquote>
<a id="more"></a>
<h3 id="u4E8C_u3001JSP_EL_u7B80_u4ECB"><a href="#u4E8C_u3001JSP_EL_u7B80_u4ECB" class="headerlink" title="二、JSP EL简介"></a>二、JSP EL简介</h3><h4 id="1_u3001_u8BED_u6CD5_u7ED3_u6784"><a href="#1_u3001_u8BED_u6CD5_u7ED3_u6784" class="headerlink" title="1、语法结构"></a>1、语法结构</h4><p><code>${expression}</code></p>
<h4 id="2_u3001_5B__5D_u4E0E-_u8FD0_u7B97_u7B26"><a href="#2_u3001_5B__5D_u4E0E-_u8FD0_u7B97_u7B26" class="headerlink" title="2、[ ]与.运算符"></a>2、[ ]与.运算符</h4><ul>
<li>EL 提供“.“和“[ ]“两种运算符来存取数据。<br>当要存取的属性名称中包含一些特殊字符，如.或?等并非字母或数字的符号，就一定要使用“[ ]“。例如：<br>${user.My-Name}应当改为${user[“My-Name”] }</li>
<li>如果要动态取值时，就可以用“[ ]“来做，而“.“无法做到动态取值。例如：<br>${sessionScope.user[data]}中data 是一个变量</li>
</ul>
<h4 id="3_u3001_u53D8_u91CF"><a href="#3_u3001_u53D8_u91CF" class="headerlink" title="3、变量"></a>3、变量</h4><p> EL存取变量数据的方法很简单，例如：${username}。它的意思是取出某一范围中名称为username的变量。<br> 因为我们并没有指定哪一个范围的username，所以它会依序从Page、Request、Session、Application范围查找。<br> 假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传null。<br> 属性范围在EL中的名称</p>
<table>
<thead>
<tr>
<th>范围</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>Page</td>
<td>PageScope</td>
</tr>
<tr>
<td>Request</td>
<td>RequestScope</td>
</tr>
<tr>
<td>Session</td>
<td>SessionScope</td>
</tr>
<tr>
<td>Application</td>
<td>ApplicationScope</td>
</tr>
</tbody>
</table>
<h3 id="u4E09_u3001JSP_EL__u4E2D_u7684_u6709_u6548_u8868_u8FBE_u5F0F"><a href="#u4E09_u3001JSP_EL__u4E2D_u7684_u6709_u6548_u8868_u8FBE_u5F0F" class="headerlink" title="三、JSP EL 中的有效表达式"></a>三、JSP EL 中的有效表达式</h3><p>有效表达式可以包含文字、操作符、变量（对象引用）和函数调用。我们将分别了解这些有效表达式中的每一种：</p>
<h4 id="1_u3001_u6587_u5B57"><a href="#1_u3001_u6587_u5B57" class="headerlink" title="1、文字"></a>1、文字</h4><p>JSP 表达式语言定义可在表达式中使用的以下文字：</p>
<table>
<thead>
<tr>
<th>文字</th>
<th>文字的值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Boolean</td>
<td>true 和 false</td>
</tr>
<tr>
<td>Integer</td>
<td>与 Java 类似。可以包含任何正数或负数，例如 24、-45、567</td>
</tr>
<tr>
<td>Floating Point</td>
<td>与 Java 类似。可以包含任何正的或负的浮点数，例如 -1.8E-45、4.567</td>
</tr>
<tr>
<td>String</td>
<td>任何由单引号或双引号限定的字符串。对于单引号、双引号和反斜杠，使用反斜杠字符作为转义序列。必须注意，如果在字符串两端使用双引号，则单引号不需要转义。</td>
</tr>
<tr>
<td>Null</td>
<td>null</td>
</tr>
</tbody>
</table>
<h4 id="2_u3001_u64CD_u4F5C_u7B26"><a href="#2_u3001_u64CD_u4F5C_u7B26" class="headerlink" title="2、操作符"></a>2、操作符</h4><p>JSP 表达式语言提供以下操作符，其中大部分是 Java 中常用的操作符：</p>
<table>
<thead>
<tr>
<th>术  语</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>算术型</td>
<td>+、-（二元）、*、/、div、%、mod、-（一元）</td>
</tr>
<tr>
<td>逻辑型</td>
<td>and、&amp;&amp;、or、｜｜、!、not</td>
</tr>
<tr>
<td>关系型</td>
<td>==、eq、!=、ne、、gt、&lt;=、le、&gt;=、ge。可以与其他值进行比较，或与布尔型、字符串型、整型或浮点型文字进行比较。</td>
</tr>
<tr>
<td>空</td>
<td>空操作符是前缀操作，可用于确定值是否为空。</td>
</tr>
<tr>
<td>条件型</td>
<td>A ?B :C。根据 A 赋值的结果来赋值 B 或 C。</td>
</tr>
</tbody>
</table>
<h4 id="3_u3001_u9690_u5F0F_u5BF9_u8C61"><a href="#3_u3001_u9690_u5F0F_u5BF9_u8C61" class="headerlink" title="3、隐式对象"></a>3、隐式对象</h4><p>JSP 表达式语言定义了一组隐式对象，其中许多对象在 JSP scriplet 和表达式中可用：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pageContext</code></td>
<td>JSP 页的上下文。它可以用于访问 JSP 隐式对象，如请求、响应、会话、输出、servletContext 等。例如，<code>${pageContext.response}</code> 为页面的响应对象赋值。</td>
</tr>
</tbody>
</table>
<p>此外，还提供几个隐式对象，允许对以下对象进行简易访问：</p>
<table>
<thead>
<tr>
<th>术语</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>param</td>
<td>将请求参数名称映射到单个字符串参数值（通过调用<code>ServletRequest.getParameter (String name)</code> 获得）。<code>getParameter(String)</code>方法返回带有特定名称的参数。表达式 <code>$(param.name)</code> 相当于<code>request.getParameter (name)</code> 。</td>
</tr>
<tr>
<td>paramValues</td>
<td>将请求参数名称映射到一个数值数组（通过调用 <code>ServletRequest.getParameter (String name)</code> 获得）。它与 <code>param</code> 隐式对象非常类似，但它检索一个字符串数组而不是单个值。表达式 <code>${paramvalues.name)</code> 相当于 <code>request.getParamterValues(name)</code>。</td>
</tr>
<tr>
<td>header</td>
<td>将请求头名称映射到单个字符串头值（通过调用 <code>ServletRequest.getHeader(String name)</code> 获得）。表达式 <code>${header.name}</code> 相当于 <code>request.getHeader(name)</code>。</td>
</tr>
<tr>
<td>headerValues</td>
<td>将请求头名称映射到一个数值数组（通过调用<code>ServletRequest.getHeaders(String)</code>获得）。它与头隐式对象非常类似。表达式 <code>${headerValues.name}</code> 相当于<code>request.getHeaderValues(name)</code>。</td>
</tr>
<tr>
<td>cookie</td>
<td>将 cookie 名称映射到单个 cookie对象。向服务器发出的客户端请求可以获得一个或多个 cookie。表达式 <code>${cookie.name.value}</code> 返回带有特定名称的第一个 cookie 值。如果请求包含多个同名的 cookie，则应该使用 <code>${headerValues.name}</code>表达式。</td>
</tr>
<tr>
<td>initParam</td>
<td>将上下文初始化参数名称映射到单个值（通过调用<code>ServletContext.getInitparameter(String name)</code> 获得）。</td>
</tr>
</tbody>
</table>
<p>除了上述两种类型的隐式对象之外，还有些对象允许访问多种范围的变量，如 Web 上下文、会话、请求、页面：</p>
<table>
<thead>
<tr>
<th>术语</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>pageScope</td>
<td>将页面范围的变量名称映射到其值。例如，EL 表达式可以使用 <code>${pageScope.objectName}</code> 访问一个 JSP 中页面范围的对象，还可以使用 <code>${pageScope.objectName.attributeName}</code> 访问对象的属性。</td>
</tr>
<tr>
<td>requestScope</td>
<td>将请求范围的变量名称映射到其值。该对象允许访问请求对象的属性。例如，EL 表达式可以使用<code>${requestScope.objectName}</code> 访问一个 JSP 请求范围的对象，还可以使用 <code>${requestScope.objectName.attributeName}</code> 访问对象的属性。</td>
</tr>
<tr>
<td>sessionScope</td>
<td>将会话范围的变量名称映射到其值。该对象允许访问会话对象的属性。例如：<code>$sessionScope.name}</code> </td>
</tr>
<tr>
<td>applicationScope</td>
<td>将应用程序范围的变量名称映射到其值。该隐式对象允许访问应用程序范围的对象。</td>
</tr>
</tbody>
</table>
<h3 id="u56DB_u3001_u7279_u522B_u5F3A_u8C03"><a href="#u56DB_u3001_u7279_u522B_u5F3A_u8C03" class="headerlink" title="四、特别强调"></a>四、特别强调</h3><ol>
<li>注意当表达式根据名称引用这些对象之一时，返回的是相应的对象而不是相应的属性。例如：即使现有的 pageContext 属性包含某些其他值，${pageContext} 也返回 PageContext 对象。</li>
<li>注意 &lt;%@ page isELIgnored=”true” %&gt; 表示是否禁用EL语言,TRUE表示禁止.FALSE表示不禁止.JSP2.0中默认的启用EL语言。</li>
</ol>
<h3 id="u4E94_u3001_u4E3E_u4F8B_u8BF4_u660E"><a href="#u4E94_u3001_u4E3E_u4F8B_u8BF4_u660E" class="headerlink" title="五、举例说明"></a>五、举例说明</h3><ol>
<li><p>例如，&lt; %=request.getParameter(“username”)% &gt;等价于${ param.username }</p>
</li>
<li><p>例如，但是下面的那句EL语言可以完成如果得到一个username为空，则不显示null,而是不显示值。<br>&lt;%=user.getAddr( ) %&gt;等价于${user.addr}。</p>
</li>
<li><p>例如：<br> &lt;% =request.getAttribute(“userlist”) %&gt;等价于${requestScope.userlist }</p>
</li>
<li><p>例如，原理如上例3。<br> ${ sessionScope.userlist } 1<br> ${ sessionScope.userlist } 2<br> ${ applicationScope.userlist } 3<br> ${ pageScope.userlist } 4<br> ${uselist} 含义：执行顺序为4 1 2 3。<br> “.”后面的只是一个字符串，并不是真正的内置对象，不能调用对象。</p>
</li>
<li><p>例如，<br> &lt;%=user.getAddr( ) %&gt;等价于${user.addr}<br> 第一句前面的user,为一个变量。<br> 第二句后面user，必须为在某一个范围里的属性。</p>
</li>
</ol>
<h3 id="u8865_u5145_uFF1A"><a href="#u8865_u5145_uFF1A" class="headerlink" title="补充："></a>补充：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> http:<span class="comment">//java.sun.com/jstl/core_rt"&gt;http://java.sun.com/jstl/core_rt" %&gt;</span></span><br><span class="line">FOREACH:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">"$&#123;messages&#125;"</span></span><br><span class="line"><span class="attribute">var</span>=<span class="value">"item"</span></span><br><span class="line"><span class="attribute">begin</span>=<span class="value">"0"</span></span><br><span class="line"><span class="attribute">end</span>=<span class="value">"9"</span></span><br><span class="line"><span class="attribute">step</span>=<span class="value">"1"</span></span><br><span class="line"><span class="attribute">varStatus</span>=<span class="value">"var"</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></span><br><span class="line">OUT:</span><br><span class="line"><span class="tag">&lt;<span class="title">c:out</span> <span class="attribute">value</span>=<span class="value">"/$&#123;logininfo.username&#125;"</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><c:out>将value中的内容输出到当前位置，这里也就是把logininfo对象的username属性值输出到页面当前位置。</c:out></li>
<li>${……}是JSP2.0 中的Expression Language（EL）的语法。它定义了一个表达式，其中的表达式可以是一个常量（如上），也可以是一个具体的表达语句（如forEach循环体中的情况）。典型案例如下：<br>&emsp;&emsp; ?&nbsp;${logininfo.username}这表明引用logininfo 对象的username 属性。我们可以通过“.”操作符引用对象的属性，也可以用“[]”引用对象属性，如${logininfo[username]}与${logininfo.username}达到了同样的效果。</li>
<li>“[&nbsp;]”引用方式的意义在于，如果属性名中出现了特殊字符，如“.”或者“-”，此时就必须使用“[ ]”获取属性值以避免语法上的冲突（系统开发时应尽量避免这一现象的出现）。与之等同的JSP Script大致如下：<br>&emsp;&emsp;<code>LoginInfo logininfo = (LoginInfo)session.getAttribute(“logininfo”);</code><br>&emsp;&emsp;<code>String username = logininfo.getUsername();</code></li>
<li>可以看到，EL大大节省了编码量。<br>&emsp;&emsp;这里引出的另外一个问题就是，EL 将从哪里找到logininfo 对象，对于${logininfo.username}这样的表达式而言，首先会从当前页面中寻找之前是否定义了变量logininfo，如果没有找到则依次到Request、Session、Application 范围内寻找，直到找到为止。如果直到最后依然没有找到匹配的变量，则返回null.</li>
<li>如果我们需要指定变量的寻找范围，可以在EL表达式中指定搜寻范围：<br>&emsp;&emsp; <code>${pageScope.logininfo.username}</code><br>&emsp;&emsp; <code>${requestScope.logininfo.username}</code><br>&emsp;&emsp; <code>${sessionScope.logininfo.username}</code><br>&emsp;&emsp; <code>${applicationScope.logininfo.username}</code></li>
<li>在Spring 中，所有逻辑处理单元返回的结果数据，都将作为Attribute 被放置到       HttpServletRequest 对象中返回（具体实现可参见Spring 源码中org.springframework.web.servlet.view.InternalResourceView.exposeModelAsRequestAttributes方法的实现代码），也就是说SpringMVC 中，结果数据对象默认都是requestScope。因此，在Spring MVC 中，<br>以下寻址方法应慎用：<br>&emsp;&emsp; <code>${sessionScope.logininfo.username}</code><br>&emsp;&emsp; <code>${applicationScope.logininfo.username}</code></li>
<li>?&nbsp;${1＋2}<br>结果为表达式计算结果，即整数值3。</li>
<li>?&nbsp;${i&gt;1}<br>&emsp;&emsp;如果变量值i&gt;1的话，将返回bool类型true。与上例比较，可以发现EL会自动根据表达式计算结果返回不同的数据类型。<br>&emsp;&emsp;表达式的写法与java代码中的表达式编写方式大致相同。</li>
<li>IF / CHOOSE:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;var.index % 2 == 0&#125;"</span>&gt;</span><br><span class="line">*</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">--判定条件一般为一个EL表达式。--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">c:if</span>&gt;</span>并没有提供else子句，使用的时候可能有些不便，此时我们可以通过<span class="tag">&lt;<span class="title">c:choose</span>&gt;</span></span><br><span class="line">tag来达到类似的目的：</span><br><span class="line"><span class="tag">&lt;<span class="title">c:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">c:when</span> <span class="attribute">test</span>=<span class="value">"$&#123;var.index % 2 == 0&#125;"</span>&gt;</span></span><br><span class="line">*</span><br><span class="line"><span class="tag">&lt;/<span class="title">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">c:otherwise</span>&gt;</span></span><br><span class="line">!</span><br><span class="line"><span class="tag">&lt;/<span class="title">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">c:choose</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>类似Java 中的switch 语句，<c:choose>提供了复杂判定条件下的简化处理手法。其<br>中<code>&lt;c:when&gt;</code>子句类似case子句，可以出现多次。上面的代码，在奇数行时输出“*”号，<br>而偶数行时输出“!”。<br>经验： 如果EL表达式无法解析：– &lt;%@ page isELIgnored=”false” %&gt;</c:choose></p>
<h3 id="u4E00_u3001JSTL"><a href="#u4E00_u3001JSTL" class="headerlink" title="一、JSTL"></a>一、JSTL</h3><h4 id="1-_EL_u8FD0_u7B97_u7B26"><a href="#1-_EL_u8FD0_u7B97_u7B26" class="headerlink" title="1. EL运算符"></a>1. EL运算符</h4><ul>
<li>var指定变量，并把EL运算结果赋值给该变量值为true/false；</li>
<li>scope:指定 var变量的范围；</li>
</ul>
<h4 id="2-__u8FED_u4EE3_u6807_u7B7E"><a href="#2-__u8FED_u4EE3_u6807_u7B7E" class="headerlink" title="2. 迭代标签"></a>2. 迭代标签</h4><ul>
<li>语法：<code>&lt;c:forEach items=“collection” var=“name” varStatus=“status” begin=“int“ 
end=”int” step=“int” &gt;
//循环体
&lt;/c:forEach&gt;</code></li>
<li>说明:<br>1)items:是集合，用EL表达式；<br>2)var:变量名，存放items<br>3)varStatus: 显示循环状态的变量<br>&emsp;&emsp;①index:从0开始;<br>&emsp;&emsp;②count:元素位置,从1开始;<br>&emsp;&emsp;③first:如果是第一个元素则显示true;<br>&emsp;&emsp;④last:如果是最后一个元素则显示true;<br>4)begin:循环的初始值(整型)；<br>5)end: 循环结束 ;<br>6)step:步长,循环间隔的数值；</li>
</ul>
<h4 id="3-__26lt_3Bc_3Aotherwise_26gt_3B_u6807_u7B7E"><a href="#3-__26lt_3Bc_3Aotherwise_26gt_3B_u6807_u7B7E" class="headerlink" title="3. &lt;c:otherwise&gt;标签"></a>3. <code>&lt;c:otherwise&gt;</code>标签</h4><p>&emsp;&emsp;例：<br>&emsp;&emsp;如果user.wealthy值true，则显示user.wealthy is true.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">c:when</span> <span class="attribute">test</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">user.generous is true.</span><br><span class="line"><span class="tag">&lt;/<span class="title">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">c:when</span> <span class="attribute">test</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">user.stingy is true.</span><br><span class="line"><span class="tag">&lt;/<span class="title">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">c:otherwise</span>&gt;</span></span><br><span class="line">user.generous and user.stingy are false.</span><br><span class="line"><span class="tag">&lt;/<span class="title">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">c:choose</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;说明： </p>
<ul>
<li>只有当条件user.generous返回值是true时，才显示<code>user.generous is true.</code></li>
<li>只有当条件user.stingy返回值是true时，才显示<code>user.stingy is true.</code></li>
<li>其它所有的情况（即user.generous和user.stingy的值都不为true）全部显示<code>user.generous and user.stingy are false.</code></li>
<li>由于JSTL没有形如<code>if (){…} else {…}</code>的条件语句，所以这种形式的语句只能用<code>&lt;c:choose&gt;</code>、<br><code>&lt;c:when&gt;</code>和<code>&lt;c:otherwise&gt;</code>标签共同来完成了。</li>
</ul>
<h4 id="4-__26lt_3Bc_3AforTokens_26gt_3B_u6807_u7B7E"><a href="#4-__26lt_3Bc_3AforTokens_26gt_3B_u6807_u7B7E" class="headerlink" title="4. &lt;c:forTokens&gt;标签"></a>4. <code>&lt;c:forTokens&gt;</code>标签</h4><p>说明：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>是否必须</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>items</td>
<td>进行循环的项目</td>
<td>是</td>
<td>无</td>
</tr>
<tr>
<td>delims</td>
<td>分割符</td>
<td>是</td>
<td>无</td>
</tr>
<tr>
<td>begin</td>
<td>开始条件</td>
<td>否</td>
<td>0</td>
</tr>
<tr>
<td>end</td>
<td>结束条件</td>
<td>否</td>
<td>集合中的最后一个项目</td>
</tr>
<tr>
<td>step</td>
<td>步长</td>
<td>否</td>
<td>1</td>
</tr>
<tr>
<td>var</td>
<td>代表当前项目的变量名</td>
<td>否</td>
<td>无</td>
</tr>
<tr>
<td>varStatus</td>
<td>显示循环状态的变量</td>
<td>否</td>
<td>无</td>
</tr>
</tbody>
</table>
<p>例子:<br><code>&lt;c:forTokens items=&quot;a:b:c:d&quot; delims=&quot;:&quot; var=&quot;token&quot;&gt;</code><br><code>&lt;c:out value=&quot;&quot;/&gt;</code><br><code>&lt;/c:forTokens&gt;</code><br>这个标签的使用相当于<code>java.util.StringTokenizer</code>类。在这里将字符串a:b:c:d以：分开循环四次，token是循环到当前分割到的字符串。</p>
<h4 id="5-__u6807_u7B7E"><a href="#5-__u6807_u7B7E" class="headerlink" title="5. 标签"></a>5. <c:redirect>标签</c:redirect></h4><p>&emsp;&emsp;说明：标签将请求重新定向到另外一个页面，它有以下属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描 述</th>
<th>是否必须</th>
<th>缺省值</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>url地址</td>
<td>是</td>
<td>无</td>
</tr>
<tr>
<td>context</td>
<td>/后跟本地web应用程序的名字</td>
<td>否</td>
<td>当前应用程序</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;例子：<br><code>&lt;c:redirect /&#39;&gt;http://www.yourname.com/login.jsp&quot;/&gt;
将请求重新定向到http://www.yourname.com/login.jsp页，相当于response.setRedirect
(&quot;http://www.yourname.com/login.jsp&quot;);</code></p>
<h4 id="6-__u6807_u7B7E"><a href="#6-__u6807_u7B7E" class="headerlink" title="6. 标签"></a>6. <c:param>标签</c:param></h4><p>&emsp;&emsp;说明：<c:param>标签用来传递参数给一个重定向或包含页面，它有以下属性</c:param></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描 述</th>
<th>是否必须</th>
<th>缺省值</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>在request参数中设置的变量名</td>
<td>是</td>
<td>无</td>
</tr>
<tr>
<td>value</td>
<td>在request参数中设置的变量值</td>
<td>否</td>
<td>无</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;例子：<br>&emsp;&emsp;<code>&lt;c:redirect url=&quot;login.jsp&quot;&gt;</code><br>&emsp;&emsp;&emsp;&emsp;<code>&lt;c:param value=&quot;888&quot;/&gt;</code><br>&emsp;&emsp;<code>&lt;/c:redirect&gt;</code><br>将参数888以id为名字传递到login.jsp页面，相当于login.jsp?id=888</p>
<h4 id="7-__26lt_3Bfmt_3A_26gt_3B_u683C_u5F0F_u5316_u6807_u7B7E"><a href="#7-__26lt_3Bfmt_3A_26gt_3B_u683C_u5F0F_u5316_u6807_u7B7E" class="headerlink" title="7. &lt;fmt:&gt;格式化标签"></a>7. <code>&lt;fmt:&gt;</code>格式化标签</h4><p>&emsp;&emsp;说明：需要导入 <code>&lt;%@ taglib prefix=&quot;fmt&quot; http://java.sun.com/jsp/jstl/fmt&quot;&gt;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</code><br>&emsp;&emsp;1）格式化日期<code>&lt;fmt:formatDate value=“” pattern=“yyyy-MM-dd HH:mm:ss”/&gt;</code><br>&emsp;&emsp;&emsp;&emsp;Value:通过EL表达式或<code>&lt;%new Date() %&gt;</code>取的日期值；<br>&emsp;&emsp;&emsp;&emsp;Pattern:输出的日期格式；<br>&emsp;&emsp;2）格式化数字<code>&lt;fmt:formatNumber value=“${n}” pattern=“###,###,##”/&gt;</code><br>&emsp;&emsp;&emsp;&emsp;Value:通过EL表达式取的数字值；<br>&emsp;&emsp;&emsp;&emsp;Pattern:输出的数字格式；</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="JSP_u4E2D_u7684EL_u8868_u8FBE_u5F0F_u8BE6_u7EC6_u4ECB_u7ECD"><a href="#JSP_u4E2D_u7684EL_u8868_u8FBE_u5F0F_u8BE6_u7EC6_u4ECB_u7ECD" class="headerlink" title="JSP中的EL表达式详细介绍"></a>JSP中的EL表达式详细介绍</h2><h3 id="u4E00_u3001JSP_EL_u8BED_u8A00_u5B9A_u4E49"><a href="#u4E00_u3001JSP_EL_u8BED_u8A00_u5B9A_u4E49" class="headerlink" title="一、JSP EL语言定义"></a>一、JSP EL语言定义</h3><blockquote>
<p>&emsp;&emsp;EL 提供了在 JSP 脚本编制元素范围外使用运行时表达式的功能。脚本编制元素是指页面中能够用于在 JSP 文件中嵌入 Java 代码的元素。它们通常用于对象操作以及执行那些影响所生成内容的计算。JSP 2.0 将 EL 表达式添加为一种脚本编制元素。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="JSP EL" scheme="http://oneyx.github.io/tags/JSP-EL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring+Mybatis脚手架的使用]]></title>
    <link href="http://oneyx.github.io/2015/12/25/Spring-Mybatis%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://oneyx.github.io/2015/12/25/Spring-Mybatis脚手架的使用/</id>
    <published>2015-12-25T14:33:13.000Z</published>
    <updated>2015-12-26T05:41:41.294Z</updated>
    <content type="html"><![CDATA[<h3 id="Github_u5730_u5740"><a href="#Github_u5730_u5740" class="headerlink" title="Github地址"></a>Github地址</h3><blockquote>
<p><strong><a href="https://github.com/1994/ssm-scaffold.git" target="_blank" rel="external">https://github.com/1994/ssm-scaffold.git</a></strong></p>
</blockquote>
<h3 id="u7B80_u5355_u8BF4_u660E"><a href="#u7B80_u5355_u8BF4_u660E" class="headerlink" title="简单说明"></a>简单说明</h3><p>这是一个Spring4+Mybatis3的脚手架项目，方便老鸟使用，新手学习。出于个人爱好，我还添加了其他的依赖，以下是全部依赖:</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">junit-version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="title">junit-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">spring-version</span>&gt;</span>4.2.1.RELEASE<span class="tag">&lt;/<span class="title">spring-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mybatis-version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="title">mybatis-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mybatis-spring-version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="title">mybatis-spring-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">druid-version</span>&gt;</span>1.0.15<span class="tag">&lt;/<span class="title">druid-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">fastjson-version</span>&gt;</span>1.2.7<span class="tag">&lt;/<span class="title">fastjson-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mysql-connection-version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="title">mysql-connection-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mybatis-generator-version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="title">mybatis-generator-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">pagehelper-version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="title">pagehelper-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">slf4j-version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="title">slf4j-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">log4j-version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="title">log4j-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在一些我觉得很有必要的地方我都加上了中文注释。</p>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><p>推荐使用IDEA:<br><img src="http://7xawrk.com1.z0.glb.clouddn.com/15-10-14/8288030.jpg" alt=""><br>clone 完后会看到这样的目录结构<br><img src="http://7xawrk.com1.z0.glb.clouddn.com/15-10-14/31026011.jpg" alt=""></p>
<h3 id="u4FEE_u6539_u914D_u7F6E_u6587_u4EF6"><a href="#u4FEE_u6539_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>项目的配置文件均放在 src/main/resources下</p>
<ul>
<li>applicationContext.xml:Spring 配置文件</li>
<li>generator.properties:Mybatis-generator 配置文件</li>
<li>generatorConfig.xml:Mybatis-generator 配置文件</li>
<li>jdbc.properties:jdbc配置文件</li>
<li>log4j.properties:log4j 配置文件</li>
<li>mvc-dispatcher-servlet.xml:SpringMVC配置文件</li>
</ul>
<p>主要需要修改的是</p>
<ul>
<li>generator.properties:Mybatis-generator 配置文件</li>
<li>generatorConfig.xml:Mybatis-generator 配置文件</li>
<li>jdbc.properties:jdbc配置文件</li>
</ul>
<p>applicationContext.xml 以下地方需要注意：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Spring注解自动扫描的包</span><br><span class="line"><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"dao"</span> /&gt;</span></span><br><span class="line">//Mybatis自动配置Mapper的包，也就是Mybatis生成xxMapper所在的包</span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"basePackage"</span> <span class="attribute">value</span>=<span class="value">"dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果你修改了相关的package，则上面需要修改，同理在mvc-dispatcher-servlet.xml中也有action:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"action"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u5F00_u59CB"><a href="#u5F00_u59CB" class="headerlink" title="开始"></a>开始</h3><p>准备一张表user表:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u4F7F_u7528mybatis-generator_u81EA_u52A8_u751F_u6210"><a href="#u4F7F_u7528mybatis-generator_u81EA_u52A8_u751F_u6210" class="headerlink" title="使用mybatis-generator自动生成"></a>使用mybatis-generator自动生成</h3><p>默认情况下，IDEA能自动识别出Maven的mybatis generator插件，但我们还需要进行一点修改<br>在IDEA中，Run-&gt;Edit Configurations 修改Maven的选项:<br><img src="http://7xawrk.com1.z0.glb.clouddn.com/15-10-14/90011352.jpg" alt=""><br>添加上一个参数<code>-e</code>，用于在控制台打印错误信息。<br>然后我们在<code>generatorConfig.xml</code>中加入这张表：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">table</span> <span class="attribute">tableName</span>=<span class="value">"user"</span> <span class="attribute">enableCountByExample</span>=<span class="value">"false"</span></span><br><span class="line">           <span class="attribute">enableUpdateByExample</span>=<span class="value">"false"</span> <span class="attribute">enableDeleteByExample</span>=<span class="value">"false"</span></span><br><span class="line">           <span class="attribute">enableSelectByExample</span>=<span class="value">"false"</span> <span class="attribute">selectByExampleQueryId</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>generatorConfig.xml</code>里还有很多配置，你可以直接使用我的默认配置，往上面添加table即可。<br>相关配置说明可以看<a href="http://www.jianshu.com/p/e09d2370b796" target="_blank" rel="external">这篇文章</a>。<br>这样我们就能点击Run了，顺利的话就能看到自动生成的代码。</p>
<h3 id="u7F16_u5199service"><a href="#u7F16_u5199service" class="headerlink" title="编写service"></a>编写service</h3><p><code>Myabtis-generator</code>会自动生成<code>UserMapper.java</code>,<code>User</code>,<code>UserMapper.xml</code><br>针对User这张表已经自动生成了如下方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer userid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">selectByPrimaryKey</span><span class="params">(Integer userid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(User record)</span></span>;</span><br></pre></td></tr></table></figure>
<p>如果上面的代码已经能满足你的需求了，那就什么都不用写。如果要增加自己的功能，比如上面没有的查询全部的User，我们所要做的便是修改<code>UserMapper.xml</code>,在<code>UserMapper.java</code>增加相应接口即可。<br><code>UserMapper.xml</code>中增加:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectAll"</span> <span class="attribute">resultType</span>=<span class="value">"entity.User"</span>&gt;</span></span><br><span class="line">    select userid, username, password from user</span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>UserMapper.java</code>中增加一个与ID同名的接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>编写一个service测试一下，我们只要依赖注意一个UserMapper,就能使用相应的功能了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="annotation">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMapper</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer userid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(userid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> pageNum  页码</span><br><span class="line">     * <span class="doctag">@param</span> pageSize 每页显示数量</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们知道，在真实的场景中，一次性获取全部用户显然是不现实的，我们往往要进行分页操作。这里我们用到了<code>PageHelper</code>这个Mybatis分页插件,详细的文档说明请看<a href="http://git.oschina.net/free/Mybatis_PageHelper" target="_blank" rel="external">这里</a>。</p>
<h3 id="u7F16_u5199action"><a href="#u7F16_u5199action" class="headerlink" title="编写action"></a>编写action</h3><p>我们写个简单的action测试一下,json方面我使用了<code>fastjson</code>,配置在<code>mvc-dispatcher-servlet.xml</code>里，默认解决了IE下json提示下载的问题，其他更多的配置请看这里。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line">    <span class="annotation">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUsers(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h3><p>当然我这里很多细节没有讲到，仅仅是简单的使用了一下，希望各位有心的读者可以自己动手搭建一下。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Github_u5730_u5740"><a href="#Github_u5730_u5740" class="headerlink" title="Github地址"></a>Github地址</h3><blockquote>
<p><strong><a href="https://github.com/1994/ssm-scaffold.git">https://github.com/1994/ssm-scaffold.git</a></strong></p>
</blockquote>
<h3 id="u7B80_u5355_u8BF4_u660E"><a href="#u7B80_u5355_u8BF4_u660E" class="headerlink" title="简单说明"></a>简单说明</h3><p>这是一个Spring4+Mybatis3的脚手架项目，方便老鸟使用，新手学习。出于个人爱好，我还添加了其他的依赖，以下是全部依赖:</p>]]>
    
    </summary>
    
      <category term="Develop" scheme="http://oneyx.github.io/tags/Develop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java正则表达式(二)]]></title>
    <link href="http://oneyx.github.io/2015/12/25/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%BA%8C/"/>
    <id>http://oneyx.github.io/2015/12/25/Java正则表达式-二/</id>
    <published>2015-12-25T14:26:27.000Z</published>
    <updated>2015-12-26T05:41:30.061Z</updated>
    <content type="html"><![CDATA[<p><strong>Java正则表达式工具类</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 正则表达式</span><br><span class="line"> * <span class="doctag">@author</span> 小破孩</span><br><span class="line"> * 2015-12-22</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Matching</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配中文字符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingChina</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"[\\u4e00-\\u9fa5]+"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匹配英文字符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingEnglish</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"[A-Za-z]+"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配英文字符大写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingEnglishAZ</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"[A-Z]+"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配英文字符小写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingEnglishaz</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"[a-z]+"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配输入数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingNumber</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"\\d+"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配输入数字位数介于a-&gt;b</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingNumber</span><span class="params">(String str,<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"\\d&#123;"</span>+a+<span class="string">","</span>+b+<span class="string">"&#125;"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配最多输入n位数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingNumberMaxLength</span><span class="params">(String str, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"\\d&#123;"</span>+n+<span class="string">"&#125;"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配至少输入n位数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingNumberMinLength</span><span class="params">(String str, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"\\d&#123;"</span>+n+<span class="string">",&#125;"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配正整数或正小数(保留到小数点后6位)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingPositiveNumber</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"([1-9]\\d*|0)\\.&#123;0,1&#125;[0-9]&#123;1,6&#125;"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配正整数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingPositiveInteger</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"[1-9]\\d*"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配负整数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingNegtiveInteger</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"-[1-9]\\d*"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配数字、英文字母、_组成的字符序列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingPassWord</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"\\w+"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配以英文字母开头,由英文字母、数字、_组成的字符序列,并且指定输入长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingPassWord</span><span class="params">(String str, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"[a-zA-Z]\\w&#123;"</span>+a+<span class="string">","</span>+b+<span class="string">"&#125;"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配邮箱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingEmail</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]&#123;2,14&#125;"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配时分秒(hh:mm:ss)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingDataHHMMSS</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配年月日(yyyy-MM-dd)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingDataYYYYMMDD</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"((((1[6-9]|[2-9]\\d)\\d&#123;2&#125;)-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d&#123;2&#125;)-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d&#123;2&#125;)-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配身份证号(18位)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingCardId</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"\\d&#123;15&#125;|\\d&#123;17&#125;[0-9Xx]"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配手机号</span></span><br><span class="line">    <span class="comment">//移动：134、135、136、137、138、139、150、151、157(TD)、158、159、183、187、188 </span></span><br><span class="line">    <span class="comment">//联通：130、131、132、152、155、156、185、186 </span></span><br><span class="line">    <span class="comment">//电信：133、153、180、189、（1349卫通） </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingPhoneNumber</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"((13[0-9])|(15[^4,\\d])|(18[0,3,5-9]))\\d&#123;8&#125;"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配IP</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingIP</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"(1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])\\."</span></span><br><span class="line">                            +<span class="string">"(00?\\d|1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."</span>  </span><br><span class="line">                            +<span class="string">"(00?\\d|1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."</span>  </span><br><span class="line">                            +<span class="string">"(00?\\d|1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配HTTP</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatchingHTTP</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        String pattern = <span class="string">"http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?"</span>;</span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        flag = m.matches();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Java正则表达式工具类</strong></p>]]>
    
    </summary>
    
      <category term="regex" scheme="http://oneyx.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java正则表达式(一)]]></title>
    <link href="http://oneyx.github.io/2015/12/25/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/"/>
    <id>http://oneyx.github.io/2015/12/25/Java正则表达式-一/</id>
    <published>2015-12-25T09:18:44.000Z</published>
    <updated>2015-12-26T05:41:10.200Z</updated>
    <content type="html"><![CDATA[<p><strong>Java正则表达式总结</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testreg; </span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher; </span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span><br><span class="line">* &lt;p&gt;Title: 正则表达式的研究&lt;/p&gt; </span><br><span class="line">* &lt;p&gt;Description: </span><br><span class="line">* 最近在工作中常常用到一些正则表达式的使用问题，到网上去找介绍大多是一鳞半爪。求人不如 </span><br><span class="line">* 求已。一狠心，自己看!这两天利用我们项目两期之间的一点空闲对J2SE所支持的正则表达式来 </span><br><span class="line">* 了个彻底研究!代价是……就是浪废了部门近十二张白纸。闲话少说，书归正传。</span><br><span class="line">* 原理： </span><br><span class="line">*     正则表达式的原理是有限状态自动机，自动机内部有有限个状态，有一个初始状态，有一个 </span><br><span class="line">* 结束状态。自动机根据输入和自身内部的当前状态来决定下一步于什么。呵呵，这是很久以前学 </span><br><span class="line">* 的东东了也记不清了，大家只作参照吧。 </span><br><span class="line">* Java中的正则表达式： </span><br><span class="line">*     从J2SE1.4起Java增加了对正则表达式的支持就是java.util.regex包，这个包中主要有 </span><br><span class="line">* 3个类:Pattern,代表模式，就是正则表达式自身，Matcher，是一个有限状态自动机，其实大多 </span><br><span class="line">* 数的活还是让Pattern类于了，Matcher往往只是简单的调用Pattern，不知道这是什么模式。这 </span><br><span class="line">* 两个类写的都很经典，还有不少算法在内值得有功力的人仔细研究一下。另一个是一个异常类当所 </span><br><span class="line">* 用正则表达式不正确时抛出，是运行时异常。 </span><br><span class="line">* 几个难点： </span><br><span class="line">*   1.line terminator </span><br><span class="line">*     line terminator 中文意终结符，是指一个或两个字符组成的字符序列。java中的 </span><br><span class="line">*     所有line terminator: </span><br><span class="line">*     A newline (line feed) character ('\n'), </span><br><span class="line">*      -----------换行符(0A) </span><br><span class="line">*     A carriage-return character followed immediately by a newline character ("\r\n"), </span><br><span class="line">*      -----------回车+换行(0D0A) </span><br><span class="line">*     A standalone carriage-return character ('\r'), </span><br><span class="line">*      -----------回车(0D) </span><br><span class="line">*     A next-line character ('\u0085'), </span><br><span class="line">*      ------------下一行符？(？表示我也不知道是什么，请大家明白的给我发mail </span><br><span class="line">*     A line-separator character ('\u2028'), or </span><br><span class="line">*      ------------行分隔符？ </span><br><span class="line">*     A paragraph-separator character ('\u2029). </span><br><span class="line">*      ------------段落分隔符？ </span><br><span class="line">*      If UNIX_LINES mode is activated, then the only line terminators recognized are newline characters. </span><br><span class="line">*      如果使用unix模式则只有\n被认为是line terminator，也就是在使用pattern时如下： </span><br><span class="line">*      Pattern p=Pattern.compile("正则表达式",Pattern.UNIX_LINE); </span><br><span class="line">*      或 Pattern p=Pattern.compile("(?d)正则表达式") </span><br><span class="line">*      "."匹配除line terminator以外的所有字符(未指定DOTALL时) </span><br><span class="line">*      在指定DOTAll模式时"."匹配所有字符 </span><br><span class="line">*   2.Quantifiers,Greedy,Reluctant and Possessive. </span><br><span class="line">*     这几个词不太好译，原文是Greedy Quantifiers,Reluctant Quantifiers and Possessive </span><br><span class="line">*     Quantifiers凭我这点英语我只好译作贪婪的量子，不情愿的量子和占有欲强的量子？这也太搞笑了， </span><br><span class="line">*     好在我理解了他们的意思。这点等下我细说。 </span><br><span class="line">*   3. 对于[a-zA-Z],[a-d[h-i]],[^a-f],[b-f&amp;&amp;[a-z]],[b-f&amp;&amp;[^cd]]等形式的理解 </span><br><span class="line">*     对于上述，原文用range,union,negation,intersection,subtraction等来描述 </span><br><span class="line">*     range表是范围，union是并集，negation是取反，intersection是交集，subtraction </span><br><span class="line">*     是……是减法？？反正是减去一部分的意思 </span><br><span class="line">*     range       a-z 从a到z的小写字母 </span><br><span class="line">*     negation    [^a-f]除了a-f之外所有的，全集是所有字符 </span><br><span class="line">*     union       [a-d[h-i]] a-d并h-i </span><br><span class="line">*     subtraction [b-f&amp;&amp;[^cd]] 就是b-f中除了cd以外的都是 </span><br><span class="line">*     intersection[b-f&amp;&amp;[a-z]] 就是b-f与a-z中的公共部分 </span><br><span class="line">*     我总结了一下，其实就是方括号表示一个集合，集合中的元素用列举法表示如[abcd]，但太多 </span><br><span class="line">*     了怎么为？总不能把从a到z的全列举吧？那就用a-z表示且省略了方括号，交集用&amp;&amp;表示，并集 </span><br><span class="line">*     省略，差集(对subtraction译成差集还差不多)用交集和取反来表示。所以，以上的可表示为： </span><br><span class="line">*     [[a-z][A-Z]],[[a-d][h-i]],[^a-f],[[b-f]&amp;&amp;[a-z]],[[b-f]&amp;&amp;[^cd]] </span><br><span class="line">*     这样是不是和我们的习惯相符了. </span><br><span class="line">*   4.各个标志的意义 </span><br><span class="line">*     在生成pattern时可以同时使用几个标志来指定进行匹配时的方案。 </span><br><span class="line">*     用法形如：Pattern p=Pattern.compile(".*a?",Pattern.UNIX_LINES); </span><br><span class="line">*     当同时指定多个标志时可以使用"|"操作符连接如： </span><br><span class="line">*     Pattern p=Pattern.compile(".*a?,Pattern.UNIX_LINES|Pattern.DOTALL); </span><br><span class="line">*     也可以在表达式中指定如： </span><br><span class="line">*     Pattern p=Pattern.compile("(?d).*a?"); </span><br><span class="line">*     Pattern p=Pattern.compile("(?d)(?s).*a?"); </span><br><span class="line">*     以上两个定义和前面两个对应等价 </span><br><span class="line">*     所有的标志如下： </span><br><span class="line">*     Constant               Equivalent Embedded Flag Expression  </span><br><span class="line">*     Pattern.CANON_EQ              None Enables canonical equivalence </span><br><span class="line">*     Pattern.CASE_INSENSITIVE      (?i) Enables case-insensitive matching </span><br><span class="line">*     Pattern.COMMENTS              (?x) Permits whitespace and comments in pattern. </span><br><span class="line">*     Pattern.MULTILINE             (?m) Enables multiline mode. </span><br><span class="line">*     Pattern.DOATALL               (?s) Enables dotall mode </span><br><span class="line">*     Pattern.UNICODE_CASE          (?u) Enables Unicode-aware case folding. </span><br><span class="line">*     Pattern.UNIX_LINES            (?d) Enables Unix lines mode </span><br><span class="line">*</span><br><span class="line">*     CANON_EQ 指定使用规范等价模式？这个我理解的也有限，是不是说只要指定了这个模式则 </span><br><span class="line">*     ascii码的'a'就可以和unicode的'a'还有XXX码的'a'相等？请教各位。(mail to me) </span><br><span class="line">*</span><br><span class="line">*     CASE_INSENSITIVE 指定使用大小写不敏感的匹配模式，这个好理解，但要注意这个标志只是 </span><br><span class="line">*     对ascii码有效，要使unicode在比较时也忽略大小写要同时指定UNICODE_CASE,就是要指定 </span><br><span class="line">*     CASE_INSENSITIVE|UNICODE_CASE或使用(?i)(?u) </span><br><span class="line">*</span><br><span class="line">*     COMMENTS 指定使用注释和忽略空白，也就是".*a"==".  *a #this is comments"我想这个 </span><br><span class="line">*     在正则表达式很大，而且是在文件中输入时比较有用，平时我看也用不上。 </span><br><span class="line">*      </span><br><span class="line">*     MULTILINE In multiline mode the expressions ^ and $ match just after  </span><br><span class="line">*     or just before, respectively, a line terminator or the end of the  </span><br><span class="line">*     input sequence. By default these expressions only match at the beginning  </span><br><span class="line">*     and the end of the entire input sequence </span><br><span class="line">*     指定使用多行匹配模式，在默认模式下，^和$分别只匹配一个输入的开始和结束。 </span><br><span class="line">*     在这种模式下，^和$ 除了匹配整个输入的开始和结束外还匹配一个line terminator的后边和 </span><br><span class="line">*     前边(不是前边和后边，就是说^匹配line terminator的后边$匹配line terminator的前边。 </span><br><span class="line">*      </span><br><span class="line">*     DOATALL 如指定了这个模式则"."可匹配任何字符包括line terminator </span><br><span class="line">*      </span><br><span class="line">*     UNIX_LINES 指定这个模式时只有\n被认为是line terminator而\r和\r\n都不是 </span><br><span class="line">*  </span><br><span class="line">*  其他的我一时想不起来了，在具体介绍时再说吧。 </span><br><span class="line">* &lt;/p&gt; </span><br><span class="line">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReg2</span> </span><br><span class="line"></span>&#123; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span><br><span class="line">   </span>&#123; </span><br><span class="line">       String str1 = <span class="string">""</span>; </span><br><span class="line">       Object str = <span class="string">""</span>; </span><br><span class="line">       <span class="comment">//注意：\r,\n,\b等转义字符在java字符串常量中要写成\\r,\\n,\\b等，否则编译都过不去 </span></span><br><span class="line">       <span class="comment">//\s匹配\r,\n,\r和空格 </span></span><br><span class="line">       System.out.println(<span class="string">"\\s匹配\\r,\\n,\\r和空格 "</span>+<span class="string">" \t\n\r"</span>.matches(<span class="string">"\\s&#123;4&#125;"</span>)); </span><br><span class="line">       <span class="comment">//\S和\s互逆 </span></span><br><span class="line">       System.out.println(<span class="string">"\\S和\\s互逆 "</span>+<span class="string">"/"</span>.matches(<span class="string">"\\S"</span>)); </span><br><span class="line">       <span class="comment">//.不匹配\r和\n </span></span><br><span class="line">       System.out.println(<span class="string">".不匹配\\r和\\n "</span>+<span class="string">"\r"</span>.matches(<span class="string">"."</span>)); </span><br><span class="line">       System.out.println(<span class="string">"\n"</span>.matches(<span class="string">"."</span>)); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//\w匹配字母，数字和下划线 </span></span><br><span class="line">       System.out.println(<span class="string">"\\w匹配字母，数字和下划线  "</span>+<span class="string">"a8_"</span>.matches(<span class="string">"\\w\\w\\w"</span>)); </span><br><span class="line">       <span class="comment">//\W和\w互逆 </span></span><br><span class="line">       System.out.println(<span class="string">"\\W和\\w互逆 "</span>+<span class="string">"&amp;_"</span>.matches(<span class="string">"\\W\\w"</span>)); </span><br><span class="line">       <span class="comment">//\d匹配数字 </span></span><br><span class="line">       System.out.println(<span class="string">"\\d匹配数字 "</span>+<span class="string">"8"</span>.matches(<span class="string">"\\d"</span>)); </span><br><span class="line">       <span class="comment">//\D与\d互逆 </span></span><br><span class="line">       System.out.println(<span class="string">"\\D与\\d互逆"</span>+<span class="string">"%"</span>.matches(<span class="string">"\\D"</span>)); </span><br><span class="line">       <span class="comment">//两者都匹配但意文不同 </span></span><br><span class="line">       System.out.println(<span class="string">"======================"</span>); </span><br><span class="line">       System.out.println(<span class="string">"表示\\000a匹配\\000a "</span>+<span class="string">"\n"</span>.matches(<span class="string">"\n"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"表示\\n匹配换行 "</span>+<span class="string">"\n"</span>.matches(<span class="string">"\\n"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"======================"</span>); </span><br><span class="line">       <span class="comment">//两者都匹配但意文不同 </span></span><br><span class="line">       System.out.println(<span class="string">"\r"</span>.matches(<span class="string">"\r"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"\r"</span>.matches(<span class="string">"\\r"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"======================"</span>); </span><br><span class="line">       <span class="comment">//^匹配开头 </span></span><br><span class="line">       System.out.println(<span class="string">"^匹配开头"</span>+<span class="string">"hell"</span>.matches(<span class="string">"^hell"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"abc\nhell"</span>.matches(<span class="string">"^hell"</span>)); </span><br><span class="line">       <span class="comment">//$匹配结束 </span></span><br><span class="line">       System.out.println(<span class="string">"$匹配结束"</span>+<span class="string">"my car\nabc"</span>.matches(<span class="string">".*ar$"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"my car"</span>.matches(<span class="string">".*ar$"</span>)); </span><br><span class="line">       <span class="comment">//\b匹配界 </span></span><br><span class="line">       System.out.println(<span class="string">"\\b匹配界 "</span>+<span class="string">"bomb"</span>.matches(<span class="string">"\\bbom."</span>)); </span><br><span class="line">       System.out.println(<span class="string">"bomb"</span>.matches(<span class="string">".*mb\\b"</span>)); </span><br><span class="line">       <span class="comment">//\B与\b互逆 </span></span><br><span class="line">       System.out.println(<span class="string">"\\B与\\b互逆"</span>+<span class="string">"abc"</span>.matches(<span class="string">"\\Babc"</span>)); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//[a-z]匹配a到z的小写字母 </span></span><br><span class="line">       System.out.println(<span class="string">"[a-z]匹配a到z的小写字母"</span>+<span class="string">"s"</span>.matches(<span class="string">"[a-z]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"S"</span>.matches(<span class="string">"[A-Z]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"9"</span>.matches(<span class="string">"[0-9]"</span>)); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//取反 </span></span><br><span class="line">       System.out.println(<span class="string">"取反"</span>+<span class="string">"s"</span>.matches(<span class="string">"[^a-z]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"S"</span>.matches(<span class="string">"[^A-Z]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"9"</span>.matches(<span class="string">"[^0-9]"</span>)); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//括号的作用 </span></span><br><span class="line">       System.out.println(<span class="string">"括号的作用"</span>+<span class="string">"aB9"</span>.matches(<span class="string">"[a-z][A-Z][0-9]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"aB9bC6"</span>.matches(<span class="string">"([a-z][A-Z][0-9])+"</span>)); </span><br><span class="line">       <span class="comment">//或运算 </span></span><br><span class="line">       System.out.println(<span class="string">"或运算"</span>+<span class="string">"two"</span>.matches(<span class="string">"two|to|2"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"to"</span>.matches(<span class="string">"two|to|2"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"2"</span>.matches(<span class="string">"two|to|2"</span>)); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//[a-zA-z]==[a-z]|[A-Z] </span></span><br><span class="line">       System.out.println(<span class="string">"[a-zA-z]==[a-z]|[A-Z]"</span>+<span class="string">"a"</span>.matches(<span class="string">"[a-zA-Z]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"A"</span>.matches(<span class="string">"[a-zA-Z]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"a"</span>.matches(<span class="string">"[a-z]|[A-Z]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"A"</span>.matches(<span class="string">"[a-z]|[A-Z]"</span>)); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//体会一下以下四个 </span></span><br><span class="line">       System.out.println(<span class="string">"体会一下以下四个\n=========================="</span>); </span><br><span class="line">       System.out.println(<span class="string">")"</span>.matches(<span class="string">"[a-zA-Z)]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">")"</span>.matches(<span class="string">"[a-zA-Z)_-]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"_"</span>.matches(<span class="string">"[a-zA-Z)_-]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"-"</span>.matches(<span class="string">"[a-zA-Z)_-]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"=========================="</span>); </span><br><span class="line">       System.out.println(<span class="string">"b"</span>.matches(<span class="string">"[abc]"</span>)); </span><br><span class="line">       <span class="comment">//[a-d[f-h]]==[a-df-h] </span></span><br><span class="line">       System.out.println(<span class="string">"[a-d[f-h]]==[a-df-h]"</span>+<span class="string">"h"</span>.matches(<span class="string">"[a-d[f-h]]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"a"</span>.matches(<span class="string">"[a-z&amp;&amp;[def]]"</span>)); </span><br><span class="line">       <span class="comment">//取交集 </span></span><br><span class="line">       System.out.println(<span class="string">"取交集"</span>+<span class="string">"a"</span>.matches(<span class="string">"[a-z&amp;&amp;[def]]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"b"</span>.matches(<span class="string">"[[a-z]&amp;&amp;[e]]"</span>)); </span><br><span class="line">       <span class="comment">//取并 </span></span><br><span class="line">       System.out.println(<span class="string">"取并"</span>+<span class="string">"9"</span>.matches(<span class="string">"[[a-c][0-9]]"</span>)); </span><br><span class="line">       <span class="comment">//[a-z&amp;&amp;[^bc]]==[ad-z] </span></span><br><span class="line">       System.out.println(<span class="string">"[a-z&amp;&amp;[^bc]]==[ad-z]"</span>+<span class="string">"b"</span>.matches(<span class="string">"[a-z&amp;&amp;[^bc]]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"d"</span>.matches(<span class="string">"[a-z&amp;&amp;[^bc]]"</span>)); </span><br><span class="line">       <span class="comment">//[a-z&amp;&amp;[^m-p]]==[a-lq-z] </span></span><br><span class="line">       System.out.println(<span class="string">"[a-z&amp;&amp;[^m-p]]==[a-lq-z]"</span>+<span class="string">"d"</span>.matches(<span class="string">"[a-z&amp;&amp;[^m-p]]"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"a"</span>.matches(<span class="string">"\\p&#123;Lower&#125;"</span>)); </span><br><span class="line">       <span class="comment">///注意以下体会\b的用法(注意，在字符串常量中十目直接写\b表退格，所以要写\\b </span></span><br><span class="line">       System.out.println(<span class="string">"*********************************"</span>); </span><br><span class="line">       System.out.println(<span class="string">"aawordaa"</span>.matches(<span class="string">".*\\bword\\b.*"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"a word a"</span>.matches(<span class="string">".*\\bword\\b.*"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"aawordaa"</span>.matches(<span class="string">".*\\Bword\\B.*"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"a word a"</span>.matches(<span class="string">".*\\Bword\\B.*"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"a word a"</span>.matches(<span class="string">".*word.*"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"aawordaa"</span>.matches(<span class="string">".*word.*"</span>)); </span><br><span class="line">       <span class="comment">//体会一下组的用法 </span></span><br><span class="line">       <span class="comment">//组的顺序，只数"("第一个为第一组第二个是第二组…… </span></span><br><span class="line">       <span class="comment">//第0组表示整个表达式 </span></span><br><span class="line">       System.out.println(<span class="string">"**************test group**************"</span>); </span><br><span class="line">       Pattern p = Pattern.compile(<span class="string">"(([abc]+)([123]+))([-_%]+)"</span>); </span><br><span class="line">       Matcher m = p.matcher(<span class="string">"aac212-%%"</span>); </span><br><span class="line">       System.out.println(m.matches()); </span><br><span class="line">       m = p.matcher(<span class="string">"cccc2223%_%_-"</span>); </span><br><span class="line">       System.out.println(m.matches()); </span><br><span class="line">       System.out.println(<span class="string">"======test group======"</span>); </span><br><span class="line">       System.out.println(m.group()); </span><br><span class="line">       System.out.println(m.group(<span class="number">0</span>)); </span><br><span class="line">       System.out.println(m.group(<span class="number">1</span>)); </span><br><span class="line">       System.out.println(m.group(<span class="number">2</span>)); </span><br><span class="line">       System.out.println(m.group(<span class="number">3</span>)); </span><br><span class="line">       System.out.println(m.group(<span class="number">4</span>)); </span><br><span class="line">       System.out.println(m.groupCount()); </span><br><span class="line">       System.out.println(<span class="string">"========test end()========="</span>); </span><br><span class="line">       System.out.println(m.end()); </span><br><span class="line">       System.out.println(m.end(<span class="number">2</span>)); </span><br><span class="line">       System.out.println(<span class="string">"==========test start()=========="</span>); </span><br><span class="line">       System.out.println(m.start()); </span><br><span class="line">       System.out.println(m.start(<span class="number">2</span>)); </span><br><span class="line">       <span class="comment">//test backslash测试反向引用？ </span></span><br><span class="line">       Pattern pp1=Pattern.compile(<span class="string">"(\\d)\\1"</span>);<span class="comment">//这个表达式表示必须有两相同的数字出现 </span></span><br><span class="line">       <span class="comment">//\1表示引用第一个组\n表示引用第n个组(必须用\\1而不能用\1因\1在字符串中另有意义(我也知道是什么)</span></span><br><span class="line">       Matcher mm1=pp1.matcher(<span class="string">"3345"</span>);<span class="comment">//33匹配但45不匹配 </span></span><br><span class="line">       System.out.println(<span class="string">"test backslash测试反向引用"</span>); </span><br><span class="line">       System.out.println(mm1.find()); </span><br><span class="line">       System.out.println(mm1.find()); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//体会以下不同 </span></span><br><span class="line">       System.out.println(<span class="string">"==============test find()========="</span>); </span><br><span class="line">       System.out.println(m.find()); </span><br><span class="line">       System.out.println(m.find(<span class="number">2</span>)); </span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"这是从第三个字符(index=2)开始找的group结果"</span>); </span><br><span class="line">       System.out.println(m.group()); </span><br><span class="line">       System.out.println(m.group(<span class="number">0</span>)); </span><br><span class="line">       System.out.println(m.group(<span class="number">1</span>)); </span><br><span class="line">       System.out.println(m.group(<span class="number">2</span>)); </span><br><span class="line">       System.out.println(m.group(<span class="number">3</span>)); </span><br><span class="line">       m.reset(); </span><br><span class="line">       System.out.println(m.find()); </span><br><span class="line">       <span class="comment">//测试一个模式可多次匹配一个串 </span></span><br><span class="line">       System.out.println(<span class="string">"测试一个模式可多次匹配一个串"</span>); </span><br><span class="line">       Pattern p1 = Pattern.compile(<span class="string">"a&#123;2&#125;"</span>); </span><br><span class="line">       Matcher m1 = p1.matcher(<span class="string">"aaaaaa"</span>); </span><br><span class="line">       <span class="comment">//这说明Matcher的matchs()方法是对事个字符串的匹配， </span></span><br><span class="line">       System.out.println(m1.matches()); </span><br><span class="line">       System.out.println(m1.find()); </span><br><span class="line">       System.out.println(m1.find()); </span><br><span class="line">       System.out.println(m1.find()); </span><br><span class="line">       System.out.println(m1.find()); </span><br><span class="line">       <span class="comment">//再测试matchs() </span></span><br><span class="line">       System.out.println(<span class="string">"再测试matchs()"</span>); </span><br><span class="line">       Pattern p2 = Pattern.compile(<span class="string">"(a&#123;2&#125;)*"</span>); </span><br><span class="line">       Matcher m2 = p2.matcher(<span class="string">"aaaa"</span>); </span><br><span class="line">       System.out.println(m2.matches()); </span><br><span class="line">       System.out.println(m2.matches()); </span><br><span class="line">       System.out.println(m2.matches()); </span><br><span class="line">       <span class="comment">//所以find是在一个串中找有没有对应的模式，而matchs是完全匹配 </span></span><br><span class="line">       <span class="comment">//test lookupat() </span></span><br><span class="line">       System.out.println(<span class="string">"test lookupat()"</span>); </span><br><span class="line">       Pattern p3 = Pattern.compile(<span class="string">"a&#123;2&#125;"</span>); </span><br><span class="line">       Matcher m3 = p3.matcher(<span class="string">"aaaa"</span>); </span><br><span class="line">       System.out.println(p3.flags()); </span><br><span class="line">       System.out.println(m3.lookingAt()); </span><br><span class="line">       System.out.println(m3.lookingAt()); </span><br><span class="line">       System.out.println(m3.lookingAt()); </span><br><span class="line">       <span class="comment">//总结以上matchs()是整个匹配且总是从头开始，find是部分匹配且从上一次匹配结束时开始找 </span></span><br><span class="line">       <span class="comment">//lookingAt也是从头开始，但是部分匹配 </span></span><br><span class="line">       System.out.println(<span class="string">"======test 空白行========"</span>); </span><br><span class="line">       System.out.println(<span class="string">"         \n"</span>.matches(<span class="string">"^[ \\t]*$\\n"</span>)); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//演示append<span class="label">XXX的用法 </span></span></span><br><span class="line">       System.out.println(<span class="string">"=================test append===================="</span>); </span><br><span class="line">       Pattern p4 = Pattern.compile(<span class="string">"cat"</span>); </span><br><span class="line">       Matcher m4 = p4.matcher(<span class="string">"one cat two cats in the yard"</span>); </span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer(); </span><br><span class="line">       <span class="keyword">boolean</span> result = m4.find(); </span><br><span class="line">       <span class="keyword">int</span> i=<span class="number">0</span>; </span><br><span class="line">       System.out.println(<span class="string">"one cat two cats in the yard"</span>); </span><br><span class="line">       <span class="keyword">while</span>(result) </span><br><span class="line">       &#123;m4.appendReplacement(sb, <span class="string">"dog"</span>); </span><br><span class="line">       System.out.println(m4.group()); </span><br><span class="line">       System.out.println(<span class="string">"第"</span>+i+++<span class="string">"次:"</span>+sb.toString()); </span><br><span class="line">       result = m4.find(); </span><br><span class="line">       &#125; </span><br><span class="line">       System.out.println(sb.toString()); </span><br><span class="line">       m4.appendTail(sb); </span><br><span class="line">       System.out.println(sb.toString()); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//test UNIX_LINES </span></span><br><span class="line">       System.out.println(<span class="string">"test UNIX_LINES"</span>); </span><br><span class="line">       Pattern p5=Pattern.compile(<span class="string">"."</span>,Pattern.UNIX_LINES); </span><br><span class="line">       Matcher m5=p5.matcher(<span class="string">"\n\r"</span>); </span><br><span class="line">       System.out.println(m5.find()); </span><br><span class="line">       System.out.println(m5.find()); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//test UNIX_LINES </span></span><br><span class="line">       System.out.println(<span class="string">"test UNIX_LINES"</span>); </span><br><span class="line">       Pattern p6=Pattern.compile(<span class="string">"(?d)."</span>); </span><br><span class="line">       Matcher m6=p6.matcher(<span class="string">"\n\r"</span>); </span><br><span class="line">       System.out.println(m6.find()); </span><br><span class="line">       System.out.println(m6.find()); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//test UNIX_LINES </span></span><br><span class="line">       System.out.println(<span class="string">"test UNIX_LINES"</span>); </span><br><span class="line">       Pattern p7=Pattern.compile(<span class="string">"."</span>); </span><br><span class="line">       Matcher m7=p7.matcher(<span class="string">"\n\r"</span>); </span><br><span class="line">       System.out.println(m7.find()); </span><br><span class="line">       System.out.println(m7.find()); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//test CASE_INSENSITIVE </span></span><br><span class="line">       System.out.println(<span class="string">"test CASE_INSENSITIVE"</span>); </span><br><span class="line">       Pattern p8=Pattern.compile(<span class="string">"a"</span>,Pattern.CASE_INSENSITIVE); </span><br><span class="line">       Matcher m8=p8.matcher(<span class="string">"aA"</span>); </span><br><span class="line">       System.out.println(m8.find()); </span><br><span class="line">       System.out.println(m8.find()); </span><br><span class="line">       System.out.println(<span class="string">"test CASE_INSENSITIVE"</span>); </span><br><span class="line">       Pattern p9=Pattern.compile(<span class="string">"(?i)a"</span>); </span><br><span class="line">       Matcher m9=p9.matcher(<span class="string">"aA"</span>); </span><br><span class="line">       System.out.println(m9.find()); </span><br><span class="line">       System.out.println(m9.find()); </span><br><span class="line">       System.out.println(<span class="string">"test CASE_INSENSITIVE"</span>); </span><br><span class="line">       Pattern p10=Pattern.compile(<span class="string">"a"</span>); </span><br><span class="line">       Matcher m10=p10.matcher(<span class="string">"aA"</span>); </span><br><span class="line">       System.out.println(m10.find()); </span><br><span class="line">       System.out.println(m10.find()); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//test COMMENTS </span></span><br><span class="line">       System.out.println(<span class="string">"test COMMENTS"</span>); </span><br><span class="line">       Pattern p11=Pattern.compile(<span class="string">" a a #ccc"</span>,Pattern.COMMENTS); </span><br><span class="line">       Matcher m11=p11.matcher(<span class="string">"aa a a #ccc"</span>); </span><br><span class="line">       System.out.println(m11.find()); </span><br><span class="line">       System.out.println(m11.find()); </span><br><span class="line">       System.out.println(<span class="string">"test COMMENTS"</span>); </span><br><span class="line">       Pattern p12 = Pattern.compile(<span class="string">"(?x) a a #ccc"</span>); </span><br><span class="line">       Matcher m12 = p12.matcher(<span class="string">"aa a a #ccc"</span>); </span><br><span class="line">       System.out.println(m12.find()); </span><br><span class="line">       System.out.println(m12.find()); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//test MULTILINE这个大家多试试参照我上面对多行模式的理解 </span></span><br><span class="line">       System.out.println(<span class="string">"test MULTILINE"</span>); </span><br><span class="line">       Pattern p13=Pattern.compile(<span class="string">"^.?"</span>,Pattern.MULTILINE|Pattern.DOTALL); </span><br><span class="line">       Matcher m13=p13.matcher(<span class="string">"helloohelloo,loveroo"</span>); </span><br><span class="line">       System.out.println(m13.find()); </span><br><span class="line">       System.out.println(<span class="string">"start:"</span>+m13.start()+<span class="string">"end:"</span>+m13.end()); </span><br><span class="line">       System.out.println(m13.find()); </span><br><span class="line">       <span class="comment">//System.out.println("start:"+m13.start()+"end:"+m13.end()); </span></span><br><span class="line">       System.out.println(<span class="string">"test MULTILINE"</span>); </span><br><span class="line">       Pattern p14=Pattern.compile(<span class="string">"(?m)^hell.*oo$"</span>,Pattern.DOTALL); </span><br><span class="line">       Matcher m14=p14.matcher(<span class="string">"hello,Worldoo\nhello,loveroo"</span>); </span><br><span class="line">       System.out.println(m14.find()); </span><br><span class="line">       System.out.println(<span class="string">"start:"</span>+m14.start()+<span class="string">"end:"</span>+m14.end()); </span><br><span class="line">       System.out.println(m14.find()); </span><br><span class="line">       <span class="comment">//System.out.println("start:"+m14.start()+"end:"+m14.end()); </span></span><br><span class="line">       System.out.println(<span class="string">"test MULTILINE"</span>); </span><br><span class="line">       Pattern p15=Pattern.compile(<span class="string">"^hell(.|[^.])*oo$"</span>); </span><br><span class="line">       Matcher m15=p15.matcher(<span class="string">"hello,Worldoo\nhello,loveroo"</span>); </span><br><span class="line">       System.out.println(m15.find()); </span><br><span class="line">       System.out.println(<span class="string">"start:"</span>+m15.start()+<span class="string">"end:"</span>+m15.end()); </span><br><span class="line">       System.out.println(m15.find()); </span><br><span class="line">       <span class="comment">// System.out.println("start:"+m15.start()+"end:"+m15.end()); </span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//test DOTALL </span></span><br><span class="line">       System.out.println(<span class="string">"test DOTALL"</span>); </span><br><span class="line">       Pattern p16=Pattern.compile(<span class="string">"."</span>,Pattern.DOTALL); </span><br><span class="line">       Matcher m16=p16.matcher(<span class="string">"\n\r"</span>); </span><br><span class="line">       System.out.println(m16.find()); </span><br><span class="line">       System.out.println(m16.find()); </span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"test DOTALL"</span>); </span><br><span class="line">       Pattern p17=Pattern.compile(<span class="string">"."</span>); </span><br><span class="line">       Matcher m17=p17.matcher(<span class="string">"\n\r"</span>); </span><br><span class="line">       System.out.println(m17.find()); </span><br><span class="line">       System.out.println(m17.find()); </span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"test DOTALL"</span>); </span><br><span class="line">       Pattern p18=Pattern.compile(<span class="string">"(?s)."</span>); </span><br><span class="line">       Matcher m18=p18.matcher(<span class="string">"\n\r"</span>); </span><br><span class="line">       System.out.println(m18.find()); </span><br><span class="line">       System.out.println(m18.find()); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//test CANON_EQ这个是jdk的例子但我实在不明白是什么意思，向大家请教 </span></span><br><span class="line">       System.out.println(<span class="string">"test CANON_EQ"</span>); </span><br><span class="line">       Pattern p19=Pattern.compile(<span class="string">"a\u030A"</span>,Pattern.CANON_EQ); </span><br><span class="line">       System.out.println(Character.getType(<span class="string">'\u030A'</span>)); </span><br><span class="line">       System.out.println(<span class="string">"is"</span>+Character.isISOControl(<span class="string">'\u030A'</span>)); </span><br><span class="line">       System.out.println(<span class="string">"is"</span>+Character.isUnicodeIdentifierPart(<span class="string">'\u030A'</span>)); </span><br><span class="line">       System.out.println(Character.getType(<span class="string">'\u00E5'</span>)); </span><br><span class="line">       System.out.println(<span class="string">"is"</span>+Character.isISOControl(<span class="string">'\u00E5'</span>)); </span><br><span class="line">       Matcher m19=p19.matcher(<span class="string">"\u00E5"</span>); </span><br><span class="line">       System.out.println(m19.matches()); </span><br><span class="line">       System.out.println(Character.getType(<span class="string">'\u0085'</span>)); </span><br><span class="line">       System.out.println(<span class="string">"is"</span>+Character.isISOControl(<span class="string">'\u0085'</span>)); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//注意下面三个例子体会Greedy,Reluctant and Possessive Quantifiers的不同 </span></span><br><span class="line">       Pattern ppp=Pattern.compile(<span class="string">".*foo"</span>); </span><br><span class="line">       Matcher mmm=ppp.matcher(<span class="string">"xfooxxxxxxfoo"</span>); </span><br><span class="line">       <span class="comment">/** </span><br><span class="line">        * Greedy   quantifiers  </span><br><span class="line">        *  X?      X, once or not at all  </span><br><span class="line">        *  X*      X, zero or more times  </span><br><span class="line">        *  X+      X, one or more times  </span><br><span class="line">        *  X&#123;n&#125;    X, exactly n times  </span><br><span class="line">        *  X(n,&#125;   X, at least n times  </span><br><span class="line">        *  X&#123;n,m&#125;  X, at least n but not more than m times  </span><br><span class="line">        *  Greedy quantifiers是最常用的一种，如上，它的匹配方式是先匹配尽可能多的字符，当这</span><br><span class="line">        *  样造成整个表达式整体不能匹配时就退一个字符再试比如： </span><br><span class="line">        *  .*foo与xfooxxxxxxfoo的匹配过程，.*先与整个输入匹配，发现这样不行，整个串不能匹配 </span><br><span class="line">        *  于是退最后一个字符"o"再试，还不行，再退直到把foo都退出才发现匹配于是结束。因为这个过程 </span><br><span class="line">        *  总是先从最大匹配开始到找到一个匹配，所以.*与之匹配的总是一个最大的，这个特点和资本家相似 </span><br><span class="line">        *  故名贪婪的 </span><br><span class="line">        */</span> </span><br><span class="line">       <span class="keyword">boolean</span> isEnd=<span class="keyword">false</span>; </span><br><span class="line">       <span class="keyword">int</span> k=<span class="number">0</span>; </span><br><span class="line">       System.out.println(<span class="string">"=========="</span>); </span><br><span class="line">       System.out.println(<span class="string">"xfooxxxxxxfoo"</span>); </span><br><span class="line">       <span class="keyword">while</span>(isEnd==<span class="keyword">false</span>) </span><br><span class="line">       <span class="keyword">try</span>&#123; </span><br><span class="line">           System.out.println(<span class="string">"the:"</span>+k++); </span><br><span class="line">           System.out.println(mmm.find()); </span><br><span class="line">           System.out.println(mmm.end()); </span><br><span class="line">       &#125;<span class="keyword">catch</span>(Exception e)&#123; </span><br><span class="line">           isEnd=<span class="keyword">true</span>; </span><br><span class="line">       &#125; </span><br><span class="line">       isEnd=<span class="keyword">false</span>; </span><br><span class="line">       Pattern ppp1=Pattern.compile(<span class="string">".*?foo"</span>); </span><br><span class="line">       Matcher mmm1=ppp1.matcher(<span class="string">"xfooxxxxxxfoo"</span>); </span><br><span class="line">       <span class="comment">/** </span><br><span class="line">        * Reluctant quantifiers  </span><br><span class="line">        *  X??       X, once or not at all  </span><br><span class="line">        *  X*?       X, zero or more times  </span><br><span class="line">        *  X+?       X, one or more times  </span><br><span class="line">        *  X&#123;n&#125;?     X, exactly n times  </span><br><span class="line">        *  X(n,&#125;?    X, at least n times  </span><br><span class="line">        *  X&#123;n,m&#125;?   X, at least n but not more than m times  </span><br><span class="line">        *  Reluctant quantifiers的匹配方式正好相反，它总是先从最小匹配开始，如果这时导致</span><br><span class="line">        *  整个串匹配失败则再吃进一个字符再试，如： </span><br><span class="line">        *  .*?foo与xfooxxxxxxfoo的匹配过程，首先，.*与空串匹配，这时整个串匹配失败，于是 </span><br><span class="line">        *  再吃一个x,这时发现整个串匹配成功，当再调用find时从上次匹配结束时开始找，先吃一个 </span><br><span class="line">        *  空串，不行，再吃一个x，不行，……直到把中间所有x都吃掉才发现匹配成功。这种方式总 </span><br><span class="line">        *  是从最小匹配开始所以它能找到最多次数的匹配，但第一匹配都是最小的。它的行为有点象雇佣 </span><br><span class="line">        *  工人，总是尽可能少的于活，故名勉强的。 </span><br><span class="line">        */</span> </span><br><span class="line">       k=<span class="number">0</span>; </span><br><span class="line">       System.out.println(<span class="string">"?????????????????????"</span>); </span><br><span class="line">       System.out.println(<span class="string">"xfooxxxxxxfoo"</span>); </span><br><span class="line">       <span class="keyword">while</span>(isEnd==<span class="keyword">false</span>) </span><br><span class="line">       <span class="keyword">try</span>&#123; </span><br><span class="line">           System.out.println(<span class="string">"the:"</span>+k++); </span><br><span class="line">           System.out.println(mmm1.find()); </span><br><span class="line">           System.out.println(mmm1.end()); </span><br><span class="line">       &#125;<span class="keyword">catch</span>(Exception e)&#123; </span><br><span class="line">           isEnd=<span class="keyword">true</span>; </span><br><span class="line">       &#125; </span><br><span class="line">       isEnd=<span class="keyword">false</span>; </span><br><span class="line">       Pattern pp2=Pattern.compile(<span class="string">".*+foo"</span>); </span><br><span class="line">       Matcher mm2=pp2.matcher(<span class="string">"xfooxxxxxxfoo"</span>); </span><br><span class="line">       <span class="comment">/** </span><br><span class="line">        *  </span><br><span class="line">        *  Possessive quantifiers  </span><br><span class="line">        *  X?+        X, once or not at all  </span><br><span class="line">        *  X*+        X, zero or more times  </span><br><span class="line">        *  X++        X, one or more times  </span><br><span class="line">        *  X&#123;n&#125;+      X, exactly n times  </span><br><span class="line">        *  X(n,&#125;+     X, at least n times  </span><br><span class="line">        *  X&#123;n,m&#125;+    X, at least n but not more than m times  </span><br><span class="line">        *  Possessive quantifiers 这种匹配方式与Greedy方式相似，所不同的是它不够聪明，当</span><br><span class="line">        *  它一口吃掉所有可以吃的字符时发现不匹配则认为整个串都不匹配，它不会试着吐出几个。它的行为和大</span><br><span class="line">        *  地主相似，贪婪但是愚蠢，所以名曰强占的。 </span><br><span class="line">        */</span> </span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> ii=<span class="number">0</span>; </span><br><span class="line">       System.out.println(<span class="string">"+++++++++++++++++++++++++++"</span>); </span><br><span class="line">       System.out.println(<span class="string">"xfooxxxxxxfoo"</span>); </span><br><span class="line">       <span class="keyword">while</span>(isEnd==<span class="keyword">false</span>) </span><br><span class="line">       <span class="keyword">try</span>&#123; </span><br><span class="line">           System.out.println(<span class="string">"the:"</span>+ii++); </span><br><span class="line">           System.out.println(mm2.find()); </span><br><span class="line">           System.out.println(mm2.end()); </span><br><span class="line">       &#125;<span class="keyword">catch</span>(Exception e)&#123; </span><br><span class="line">           isEnd=<span class="keyword">true</span>; </span><br><span class="line">       &#125;   </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Java正则表达式总结</strong></p>]]>
    
    </summary>
    
      <category term="regex" scheme="http://oneyx.github.io/tags/regex/"/>
    
  </entry>
  
</feed>
